{% if cart.item_count >0 %}

<section class="py-24 relative">
    <div class="w-full max-w-7xl px-4 md:px-5 lg:px-6 mx-auto">
        <h2 class="title font-manrope font-bold text-4xl leading-10 mb-8 text-center text-black">Shopping Cart</h2>

        <div class="title decoration-solid text-4xl leading-10 mb-8 text-center text-black">
            <a href="{{ routes.all_products_collection_url }}" class="underline hover:decoration-dashed text-sm">
                Continue Shopping
            </a>
        </div>

        <div class="overflow-x-auto bg-white rounded-3xl shadow-md">
            <table class="min-w-full table-auto">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="py-3 px-4 text-left text-sm font-semibold text-gray-600">Product</th>
                        <th class="py-3 px-4 text-left text-sm font-semibold text-gray-600">Product Name </th>
                        <th class="py-3 px-4 text-left text-sm font-semibold text-gray-600">Quantity</th>
                        <th class="py-3 px-4 text-left text-sm font-semibold text-gray-600">Unit Price</th>
                        <th class="py-3 px-4 text-left text-sm font-semibold text-gray-600">Total Price</th>
                        <th class="py-3 px-4 text-left text-sm font-semibold text-gray-600">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    {% for item in cart.items %}
                    <tr class="border-b" data-item-key="{{ item.key }}">
                        <td class="py-4 px-4">
                            <img src="{{ item.image | img_url: 'medium' }}" alt="{{ item.product.title }}"
                                class="w-[120px] h-[120px] object-cover rounded-lg">
                        </td>
                        <td class="py-4 px-4">
                            <h5 class="font-manrope font-bold text-xl text-gray-900">{{ item.product.title }}</h5>
                        </td>
                        <td class="py-4 px-4">
                            <div class="flex items-center gap-4">
                                <button class="decrease-quantity p-2 border border-gray-200  rounded-full "
                                    data-item-key="{{ item.key }}">
                                    <svg width="18" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M4.5 9.5H13.5" stroke="currentColor" stroke-width="1.6"
                                            stroke-linecap="round" stroke-linejoin="round" />
                                    </svg>
                                </button>
                                <span class="item-quantity text-center" data-item-key="{{ item.key }}">{{ item.quantity
                                    }}</span>
                                <button
                                    class="increase-quantity p-2 border border-gray-200 rounded-full hover:text-gray-900"
                                    data-item-key="{{ item.key }}">
                                    <svg width="18" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M3.75 9.5H14.25M9 14.75V4.25" stroke="currentColor" stroke-width="1.6"
                                            stroke-linecap="round" stroke-linejoin="round" />
                                    </svg>
                                </button>
                            </div>
                        </td>
                        <td class="py-4 px-4 text-gray-900 text-lg">
                            {{ item.product.price | money_without_currency }}
                        </td>
                        <td class="py-4 px-4 text-gray-900 text-lg item-line-price" data-line-price-id="{{ item.key }}">
                            {{ item.line_price | money_without_currency}}
                        </td>
                        <td class="py-4 px-4">
                            <button class="remove-item text-red-500 hover:text-red-700"
                                data-item-key="{{ item.key }}">Remove</button>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        <div class="flex flex-col md:flex-row items-center justify-between lg:px-6 py-6 border-t border-gray-200">
            <h5 class="text-gray-900 font-manrope font-semibold text-2xl leading-9 w-full text-center md:text-left">
                Subtotal
            </h5>
            <div class="flex items-center justify-between gap-5">
                <h6 class="font-manrope font-bold text-3xl text-indigo-600 cart-total">{{ cart.total_price | money }}
                </h6>
            </div>
        </div>

        <div class="max-lg:max-w-lg max-lg:mx-auto text-center mt-6">
            <div class="my-2">
                <button type="submit" name="checkout"
                    class="w-full p-3 border border-gray-600 font-medium bg-gray-600 text-white">Checkout</button>
            </div>
        </div>
    </div>
</section>
{% else %}
<div class="flex items-center justify-center min-h-screen py-8 px-4 md:px-5 lg:px-5">
    <div class="w-full max-w-7xl mx-auto text-center">
        <h2 class="font-manrope font-bold text-4xl leading-10 mb-4 text-black">
            Your Cart
        </h2>
        <div class="mb-8">
            <h2 class="font-manrope  text-xl leading-10 mb-4 text-black">
                Your cart is currently empty.
            </h2>
        </div>
        <div class="mb-8">
            <a href="{{ routes.all_products_collection_url }}"
                class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700">
                Continue Shopping
            </a>
        </div>
    </div>
</div>
{% endif %}

{% schema %}
{
"name": "Cart Template",
"settings": [

]
}
{% endschema %}
<script>
    document.querySelectorAll('.increase-quantity, .decrease-quantity').forEach(button => {
            button.addEventListener('click', function () {
                const itemKey = this.getAttribute('data-item-key');
                const isIncrease = this.classList.contains('increase-quantity');
                const quantityEl = document.querySelector(`.item-quantity[data-item-key="${itemKey}"]`);
                const linePriceEl = document.querySelector(`.item-line-price[data-line-price-id="${itemKey}"]`);

                let currentQuantity = parseInt(quantityEl.textContent);
                let newQuantity = isIncrease ? currentQuantity + 1 : Math.max(1, currentQuantity - 1);

                if (newQuantity < 1) {
                    console.error('Invalid quantity:', newQuantity);
                    return;
                }

                fetch('/cart/change.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache'
                    },
                    body: JSON.stringify({ id: itemKey, quantity: newQuantity })
                })
                    .then(response => {
                        if (!response.ok) {
                            console.error(`Error: ${response.status}`, response.statusText);
                            return response.json();
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (!data || !data.items) {
                            console.error('Invalid API response:', data);
                            return;
                        }

                        quantityEl.textContent = newQuantity;

                        const updatedItem = data.items.find(i => i.key === itemKey);
                        if (updatedItem) {
                            linePriceEl.textContent = `$${(updatedItem.line_price / 100).toFixed(2)}`;
                        } else {
                            console.error(`Item with key ${itemKey} not found.`);
                        }

                        document.querySelector('.cart-total').textContent = `$${(data.total_price / 100).toFixed(2)}`;
                    })
                    .catch(error => console.error('Error updating cart:', error));
            });
        });

</script>

<script>
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function () {
            const itemKey = this.getAttribute('data-item-key');

            fetch('/cart/change.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: itemKey, quantity: 0 })
            })
                .then(response => response.json())
                .then(data => {
                    // Redirect to the cart page after item removal
                    window.location.href = '/cart';
                })
                .catch(error => console.error('Error removing item:', error));
        });
    });


</script>